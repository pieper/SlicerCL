
//
// The .in version of this file contains symbols of the 
// form <percent><openparen><symbol><closepren><type>) where <symbole> is the name 
// of a symbol to be replaced and the data type is specified by printf conventions
//


#define SLICES %(slices)d
#define ROWS %(rows)d
#define COLUMNS %(columns)d

__kernel void clearShort(__global short *destination)
{
  size_t column = get_global_id(2);
  size_t row = get_global_id(1);
  size_t slice = get_global_id(0);

  if (slice < SLICES && row < ROWS && column < COLUMNS)
  {
    size_t offset = slice*ROWS*COLUMNS + row*COLUMNS + column;
    *(destination + offset) = 0;
  }
}

__kernel void copyShort( __global short *source, __global short *destination)
{
  size_t column = get_global_id(2);
  size_t row = get_global_id(1);
  size_t slice = get_global_id(0);

  if (slice < SLICES && row < ROWS && column < COLUMNS)
  {
    size_t offset = slice*ROWS*COLUMNS + row*COLUMNS + column;
    *(destination + offset) = *(source + offset);
  }
}

__kernel void copyFloat( __global float *source, __global float *destination)
{
  size_t column = get_global_id(2);
  size_t row = get_global_id(1);
  size_t slice = get_global_id(0);

  if (slice < SLICES && row < ROWS && column < COLUMNS)
  {
    size_t offset = slice*ROWS*COLUMNS + row*COLUMNS + column;
    *(destination + offset) = *(source + offset);
  }
}

static inline void setNeighbors(
        __global short *volume,
        size_t slice, size_t row, size_t column, 
        short value )
{
  int size = 1;
  int sliceOff, rowOff, columnOff;
  unsigned int sampleSlice, sampleRow, sampleColumn;
  for (sliceOff = -size; sliceOff <= size; sliceOff++)
  {
    sampleSlice = slice + sliceOff;
    if (sampleSlice >= SLICES) continue;
    for (rowOff = -size; rowOff <= size; rowOff++)
    {
    sampleRow = row + rowOff;
    if (sampleRow >= ROWS) continue;
    {
      for (columnOff = -size; columnOff <= size; columnOff++)
      {
        sampleColumn = column + columnOff;
        if (sampleColumn >= COLUMNS) continue;
        // set the value of the volume at the neighbor location
        size_t offset = sampleSlice*ROWS*COLUMNS + sampleRow*COLUMNS + sampleColumn;
        *(volume + offset) = value;
        }
      }
    }
  }
}

__kernel void initialCandidates( __global short *labels, __global short *candidates )
{

  size_t column = get_global_id(2);
  size_t row = get_global_id(1);
  size_t slice = get_global_id(0);

  if (slice >= SLICES || row >= ROWS || column >= COLUMNS)
  {
    return;
  }

  size_t offset = slice*ROWS*COLUMNS + row*COLUMNS + column;
  if ( *(labels + offset) ) 
  {
    setNeighbors(candidates, slice, row, column, 1);
  }
}

__kernel void growCut(
                __global short *volume,
                __global short *label,
                __global float *theta,
                __global float *thetaNext,
                __global short *labelNext,
                __global short *candidates,
                __global short *candidatesNext,
                short volumeMax )
{
  size_t column = get_global_id(2);
  size_t row = get_global_id(1);
  size_t slice = get_global_id(0);
  size_t offset = slice*ROWS*COLUMNS + row*COLUMNS + column;

  if (slice >= SLICES || row >= ROWS || column >= COLUMNS)
  {
    return;
  }

  int size = 1;

  int sliceOff, rowOff, columnOff;
  unsigned int sampleSlice, sampleRow, sampleColumn;

  // copy over current to Next on the assumption that nothing will change
  *(labelNext + offset) = *(label + offset);
  float thetaNow = *(theta + offset);
  *(thetaNext + offset) = thetaNow;
  short sample = *(volume + offset);


  if ( *(candidates + offset) == 0 )
  {
    return;
  }

  short otherSample, otherLabel;
  float otherTheta, sampleDiff;
  float attackStrength;

  for (sliceOff = -size; sliceOff <= size; sliceOff++)
  {
    sampleSlice = slice + sliceOff;
    if (sampleSlice >= SLICES) continue;
    for (rowOff = -size; rowOff <= size; rowOff++)
    {
    sampleRow = row + rowOff;
    if (sampleRow >= ROWS) continue;
      for (columnOff = -size; columnOff <= size; columnOff++)
      {
        sampleColumn = column + columnOff;
        if (sampleColumn >= COLUMNS) continue;

        size_t sampleOffset = sampleSlice*ROWS*COLUMNS + 
                                sampleRow*COLUMNS + sampleColumn;
        otherLabel = *(label + sampleOffset);
        if (otherLabel != 0)
        {
          otherSample = *(volume + sampleOffset);
          otherTheta = *(theta + sampleOffset);
          sampleDiff = sample - otherSample;
          if (sampleDiff < 0) sampleDiff *= -1;
          attackStrength = otherTheta * ( 1 - ( sampleDiff / volumeMax ) );
          if (attackStrength < 0) attackStrength = -1 * attackStrength;
          if ( attackStrength > thetaNow ) 
          {
            *(labelNext + offset) = otherLabel;
            *(thetaNext + offset) = attackStrength;
            thetaNow = attackStrength;
            setNeighbors( candidatesNext, slice, row, column, 1 );
          }
        }
      }
    }
  }
}


// vim: filetype=C
// vim: foldmethod=marker
