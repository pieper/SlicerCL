
//
// Based on example code from NVIDIA's opencl SDK, and adapted
// for use with pyopencl.
//
// The .in version of this file contains symbols of the
// form <percent><openparen><symbol><closepren><type>) where <symbol> is the name
// of a symbol to be
// replaced and the data type is specified by printf conventions
//


// from old nvidia code:
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */


#define rayStepSize %(rayStepSize)s
#define rayMaxSteps %(rayMaxSteps)s

// intersect ray with a box
// http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm

int intersectBox(float4 rayOrigin, float4 rayDirection, float4 boxMin, float4 boxMax, float *tNear, float *tFar)
{
    // compute intersection of ray with all six bbox planes
    float4 invRay = (float4)(1.0f,1.0f,1.0f,1.0f) / rayDirection;
    float4 tBot = invRay * (boxMin - rayOrigin);
    float4 tTop = invRay * (boxMax - rayOrigin);

    // re-order intersections to find smallest and largest on each axis
    float4 tMin = min(tTop, tBot);
    float4 tMax = max(tTop, tBot);

    // find the largest tMin and the smallest tMax
    float largest_tMin = max(max(tMin.x, tMin.y), max(tMin.x, tMin.z));
    float smallest_tMax = min(min(tMax.x, tMax.y), min(tMax.x, tMax.z));

    *tNear = largest_tMin;
    *tFar = smallest_tMax;

    return smallest_tMax > largest_tMin;
}

uint rgbaFloatToInt(float4 rgba)
{
    rgba.x = clamp( rgba.x, 0.0f, 1.0f );
    rgba.y = clamp( rgba.y, 0.0f, 1.0f );
    rgba.z = clamp( rgba.z, 0.0f, 1.0f );
    rgba.w = clamp( rgba.w, 0.0f, 1.0f );
    return ((uint)(rgba.w * 255.0f)<<24) | ((uint)(rgba.z * 255.0f)<<16) | ((uint)(rgba.y * 255.0f)<<8) | (uint)(rgba.x * 255.0f);
}

__kernel void deviceRender(
         __global uchar4 *d_output,
         uint imageW, uint imageH,
         float density, float brightness,
         float transferOffset, float transferScale,
         __constant float* invViewMatrix,
          __read_only image3d_t volume,
          __read_only image2d_t transferFunc,
          sampler_t volumeSampler,
          sampler_t transferFuncSampler )

{
    uint x = get_global_id(0);
    uint y = get_global_id(1);

    float u = (x / (float) imageW) * 2.0f - 1.0f;
    float v = (y / (float) imageH) * 2.0f - 1.0f;

    // TODO: these should be the extents of the RAS box of the volume
    // Note they must be axis aligned so that should be fixed
    float4 boxMin = (float4)( -1.0f, -1.0f, -1.0f, 1.0f);
    float4 boxMax = (float4)(  1.0f,  1.0f,  1.0f, 1.0f);

    // calculate eye ray in world space
    float4 eyeRayOrigin;
    float4 eyeRayDirection;

    eyeRayOrigin = (float4)(invViewMatrix[3], invViewMatrix[7], invViewMatrix[11], 1.0f);

    float4 normalizedPixelVector = normalize( ( (float4)(u, v, -2.0f, 0.0f) ) );
    float4 viewVector;
    viewVector = ((float4)(invViewMatrix[0],invViewMatrix[1],invViewMatrix[2],invViewMatrix[3]));
    eyeRayDirection.x = dot( normalizedPixelVector, viewVector );
    viewVector = ((float4)(invViewMatrix[4],invViewMatrix[5],invViewMatrix[6],invViewMatrix[7]));
    eyeRayDirection.y = dot( normalizedPixelVector, viewVector );
    viewVector = ((float4)(invViewMatrix[8],invViewMatrix[9],invViewMatrix[10],invViewMatrix[11]));
    eyeRayDirection.z = dot( normalizedPixelVector,  viewVector );
    eyeRayDirection.w = 0.0f;

    // find intersection with box
    float tNear, tFar;
    int hit = intersectBox( eyeRayOrigin, eyeRayDirection, boxMin, boxMax, &tNear, &tFar );
    if (!hit) {
        if ((x < imageW) && (y < imageH)) {  //TODO: factor this out so there's a single return path
            // write output color
            uint i =(y * imageW) + x;
            d_output[i] = (uchar4)(100,100,0,255);
        }
        return;
    }
    if (tNear < 0.0f) tNear = 0.0f;     // clamp to near plane

    // march along ray from back to front, accumulating color
    float4 integratedPixel = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
    float tCurrent = tFar;
    float4 sample;

    for(uint i = 0; i < rayMaxSteps; i++) {
        float4 pos = eyeRayOrigin + eyeRayDirection * tCurrent;
        pos = pos*0.5f+0.5f;    // map position to [0, 1] coordinates

        // read from 3D texture
        sample = read_imagef(volume, volumeSampler, pos);

        // lookup in transfer function texture
        float2 transfer_pos = (float2)( (sample.x - transferOffset) * transferScale, 0.5f );
        float4 col = read_imagef( transferFunc, transferFuncSampler, transfer_pos );

      col = sample;
      col.w = 0.001;
      col.b = col.r;

        // accumulate result
        float a = col.w * density; // here w is alpha
        integratedPixel = mix( integratedPixel, col, (float4)(a, a, a, a) );

        tCurrent -= rayStepSize;
        if (tCurrent < tNear) break;
    }
    integratedPixel *= brightness;

    integratedPixel *= .1f;

    if ( (x < imageW) && (y < imageH) ) {
        // write output color
        uint i = (y * imageW) + x;
        //d_output[i] = rgbaFloatToInt( integratedPixel );

        uchar4 rgba;
        rgba.x = (uchar) 255. * clamp( integratedPixel.x, 0.0f, 1.0f );
        rgba.y = (uchar) 255. * clamp( integratedPixel.y, 0.0f, 1.0f );
        rgba.z = (uchar) 255. * clamp( integratedPixel.z, 0.0f, 1.0f );
        rgba.w = (uchar) 255. * clamp( integratedPixel.w, 0.0f, 1.0f );

      rgba.w = (uchar) 255;
        d_output[i] = rgba;
    }
}

// vim: foldmethod=marker syntax=on filetype=c
